# Generated by Django 3.0.5 on 2020-04-13 15:43

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ContractMaster',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('contractor', models.CharField(max_length=100)),
                ('contractor_rep', models.CharField(max_length=100, verbose_name='Names of Contractor Rep')),
                ('contact_contractor_rep', models.CharField(max_length=13, verbose_name='Contact of Contractor Rep')),
            ],
            options={
                'unique_together': {('contractor', 'contractor_rep', 'contact_contractor_rep')},
            },
        ),
        migrations.CreateModel(
            name='DCSupplyParameter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('system_voltage', models.FloatField(blank=True, null=True)),
                ('load_current_1', models.FloatField(blank=True, null=True)),
                ('load_current_2', models.FloatField(blank=True, null=True)),
                ('load_current_3', models.FloatField(blank=True, null=True)),
                ('load_current_4', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GeographicalDetails',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sketch_1', models.ImageField(blank=True, null=True, upload_to='')),
                ('sketch_2', models.ImageField(blank=True, null=True, upload_to='')),
                ('sketch_3', models.ImageField(blank=True, null=True, upload_to='')),
                ('sketch_4', models.ImageField(blank=True, null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='SiteDetails',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dc_system_on_site', models.BooleanField(blank=True, null=True)),
                ('dc_system_brand', models.CharField(blank=True, max_length=50, null=True)),
                ('dc_system_size', models.CharField(blank=True, max_length=50, null=True)),
                ('space_avail_in_dc_cabinet', models.BooleanField(blank=True, null=True, verbose_name='Is space available inside the DC Cabinet for Solar MPPT Controller to be installed at the power compartment section')),
                ('length_dc_cabinet', models.FloatField(blank=True, null=True, verbose_name='Measure and record the available space(LENGTH (Meter)) for the MPPT controller in the DC cabinet')),
                ('height_dc_cabinet', models.FloatField(blank=True, null=True, verbose_name='Measure and record the available space(HEIGHT (Meter)) for the MPPT controller in the DC cabinet')),
                ('tall_structure', models.BooleanField(blank=True, null=True, verbose_name='Is there any tall structure, tree or building higher than the site fence that can cause possible shading?')),
                ('tall_structure_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='If there any tall structure, indicate or name the structure type(s)')),
                ('tall_structure_height', models.FloatField(blank=True, null=True, verbose_name='If there any tall structure, specify the HEIGHT (Meter)')),
                ('tall_structure_distance_fence', models.FloatField(blank=True, null=True, verbose_name='If there any tall structure, specify the DISTANCE (Meter) of the structure from the site fence')),
                ('distance_shed_dc_cabinate', models.FloatField(blank=True, null=True, verbose_name='Record DISTANCE (Meter) from Shed leg on which DB will be fix to the DC Cabinet ')),
                ('comment', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SiteDimensionDetails',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('front_side', models.FloatField(blank=True, null=True)),
                ('right_side', models.FloatField(blank=True, null=True)),
                ('back_side', models.FloatField(blank=True, null=True)),
                ('left_side', models.FloatField(blank=True, null=True)),
                ('distance_tower_front', models.FloatField(blank=True, null=True)),
                ('distance_tower_right', models.FloatField(blank=True, null=True)),
                ('distance_tower_back', models.FloatField(blank=True, null=True)),
                ('distance_tower_left', models.FloatField(blank=True, null=True)),
                ('length_side_A_option_1', models.FloatField(blank=True, null=True)),
                ('length_side_B_option_1', models.FloatField(blank=True, null=True)),
                ('length_side_C_option_1', models.FloatField(blank=True, null=True)),
                ('length_side_D_option_1', models.FloatField(blank=True, null=True)),
                ('length_side_A_option_2', models.FloatField(blank=True, null=True)),
                ('length_side_B_option_2', models.FloatField(blank=True, null=True)),
                ('length_side_C_option_2', models.FloatField(blank=True, null=True)),
                ('length_side_D_option_2', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SiteMaster',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('site_id', models.CharField(max_length=50, unique=True)),
                ('site_name', models.CharField(blank=True, max_length=50, null=True)),
                ('site_region', models.CharField(blank=True, max_length=50, null=True)),
                ('site_latitude', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True)),
                ('site_longitude', models.DecimalField(blank=True, decimal_places=16, max_digits=22, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SupportingImagesGeographical',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('supporting_images', models.ImageField(upload_to='')),
                ('supporting_images_caption', models.CharField(max_length=300)),
                ('geographicaldetails', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.GeographicalDetails')),
            ],
        ),
        migrations.CreateModel(
            name='SiteVisit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('visited', models.DateTimeField(default=django.utils.timezone.now, unique=True)),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ContractMaster')),
                ('dcsupply', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.DCSupplyParameter')),
                ('details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.SiteDetails')),
                ('dimension', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.SiteDimensionDetails')),
                ('geography', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.GeographicalDetails')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.SiteMaster')),
            ],
            options={
                'unique_together': {('site', 'contract', 'details', 'dcsupply', 'dimension', 'geography')},
            },
        ),
    ]
